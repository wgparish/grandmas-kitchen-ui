/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CookbookAddRequest from '../model/CookbookAddRequest';
import CookbookResponse from '../model/CookbookResponse';
import CookbookUpdateRequest from '../model/CookbookUpdateRequest';
import CookbookWithGroupResponse from '../model/CookbookWithGroupResponse';
import InlineResponse400 from '../model/InlineResponse400';

/**
* CookbookController service.
* @module api/CookbookControllerApi
* @version v0
*/
export default class CookbookControllerApi {

    /**
    * Constructs a new CookbookControllerApi. 
    * @alias module:api/CookbookControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the cookbookAdd operation.
     * @callback module:api/CookbookControllerApi~cookbookAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CookbookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CookbookControllerApi~cookbookAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CookbookResponse}
     */
    cookbookAdd(opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*', 'application/json'];
      let returnType = CookbookResponse;

      return this.apiClient.callApi(
        '/cookbook/secure/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cookbookUpdate operation.
     * @callback module:api/CookbookControllerApi~cookbookUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CookbookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CookbookControllerApi~cookbookUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CookbookResponse}
     */
    cookbookUpdate(opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*', 'application/json'];
      let returnType = CookbookResponse;

      return this.apiClient.callApi(
        '/cookbook/secure/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cookbookView operation.
     * @callback module:api/CookbookControllerApi~cookbookViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CookbookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CookbookControllerApi~cookbookViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CookbookResponse}
     */
    cookbookView(cookbookId, groupId, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cookbookId': cookbookId,
        'groupId': groupId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = CookbookResponse;

      return this.apiClient.callApi(
        '/cookbook/secure/view', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCookbookList operation.
     * @callback module:api/CookbookControllerApi~getCookbookListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CookbookResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CookbookControllerApi~getCookbookListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CookbookResponse>}
     */
    getCookbookList(groupId, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupId': groupId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [CookbookResponse];

      return this.apiClient.callApi(
        '/cookbook/secure/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCookbookListFavorite operation.
     * @callback module:api/CookbookControllerApi~getCookbookListFavoriteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CookbookWithGroupResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CookbookControllerApi~getCookbookListFavoriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CookbookWithGroupResponse>}
     */
    getCookbookListFavorite(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [CookbookWithGroupResponse];

      return this.apiClient.callApi(
        '/cookbook/secure/list/favorite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
