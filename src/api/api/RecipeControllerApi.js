/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import InlineResponse400 from '../model/InlineResponse400';
import RecipeAddRequest from '../model/RecipeAddRequest';
import RecipeListResponse from '../model/RecipeListResponse';
import RecipeResponse from '../model/RecipeResponse';
import RecipeUpdateRequest from '../model/RecipeUpdateRequest';

/**
* RecipeController service.
* @module api/RecipeControllerApi
* @version v0
*/
export default class RecipeControllerApi {

    /**
    * Constructs a new RecipeControllerApi. 
    * @alias module:api/RecipeControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addRecipe operation.
     * @callback module:api/RecipeControllerApi~addRecipeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param opts
     * @param {module:api/RecipeControllerApi~addRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeResponse}
     */
    addRecipe(opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = RecipeResponse;

      return this.apiClient.callApi(
        '/recipe/secure/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRecipe operation.
     * @callback module:api/RecipeControllerApi~getRecipeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/RecipeControllerApi~getRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeResponse}
     */
    getRecipe(recipeId, cookbookId, groupId, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'recipeId': recipeId,
        'cookbookId': cookbookId,
        'groupId': groupId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = RecipeResponse;

      return this.apiClient.callApi(
        '/recipe/secure/view', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRecipeList operation.
     * @callback module:api/RecipeControllerApi~getRecipeListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecipeListResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/RecipeControllerApi~getRecipeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecipeListResponse>}
     */
    getRecipeList(groupId, cookbookId, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupId': groupId,
        'cookbookId': cookbookId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [RecipeListResponse];

      return this.apiClient.callApi(
        '/recipe/secure/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRecipeListFavorite operation.
     * @callback module:api/RecipeControllerApi~getRecipeListFavoriteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecipeListResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/RecipeControllerApi~getRecipeListFavoriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecipeListResponse>}
     */
    getRecipeListFavorite(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = [RecipeListResponse];

      return this.apiClient.callApi(
        '/recipe/secure/list/favorite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateRecipe operation.
     * @callback module:api/RecipeControllerApi~updateRecipeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecipeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/RecipeControllerApi~updateRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecipeResponse}
     */
    updateRecipe(opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = RecipeResponse;

      return this.apiClient.callApi(
        '/recipe/secure/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
